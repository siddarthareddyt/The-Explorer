//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheExplorer.CrimeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CrimeService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCrimeIndex", ReplyAction="http://tempuri.org/IService1/GetCrimeIndexResponse")]
        string GetCrimeIndex(string longitude, string latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCrimeIndex", ReplyAction="http://tempuri.org/IService1/GetCrimeIndexResponse")]
        System.Threading.Tasks.Task<string> GetCrimeIndexAsync(string longitude, string latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFarmersMarket", ReplyAction="http://tempuri.org/IService1/GetFarmersMarketResponse")]
        string GetFarmersMarket(string longitude, string latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFarmersMarket", ReplyAction="http://tempuri.org/IService1/GetFarmersMarketResponse")]
        System.Threading.Tasks.Task<string> GetFarmersMarketAsync(string longitude, string latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GeoLocation", ReplyAction="http://tempuri.org/IService1/GeoLocationResponse")]
        string[] GeoLocation(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GeoLocation", ReplyAction="http://tempuri.org/IService1/GeoLocationResponse")]
        System.Threading.Tasks.Task<string[]> GeoLocationAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StaffManager", ReplyAction="http://tempuri.org/IService1/StaffManagerResponse")]
        string StaffManager(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StaffManager", ReplyAction="http://tempuri.org/IService1/StaffManagerResponse")]
        System.Threading.Tasks.Task<string> StaffManagerAsync(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStaff", ReplyAction="http://tempuri.org/IService1/GetStaffResponse")]
        string GetStaff();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStaff", ReplyAction="http://tempuri.org/IService1/GetStaffResponse")]
        System.Threading.Tasks.Task<string> GetStaffAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TheExplorer.CrimeService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TheExplorer.CrimeService.IService1>, TheExplorer.CrimeService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetCrimeIndex(string longitude, string latitude) {
            return base.Channel.GetCrimeIndex(longitude, latitude);
        }
        
        public System.Threading.Tasks.Task<string> GetCrimeIndexAsync(string longitude, string latitude) {
            return base.Channel.GetCrimeIndexAsync(longitude, latitude);
        }
        
        public string GetFarmersMarket(string longitude, string latitude) {
            return base.Channel.GetFarmersMarket(longitude, latitude);
        }
        
        public System.Threading.Tasks.Task<string> GetFarmersMarketAsync(string longitude, string latitude) {
            return base.Channel.GetFarmersMarketAsync(longitude, latitude);
        }
        
        public string[] GeoLocation(string location) {
            return base.Channel.GeoLocation(location);
        }
        
        public System.Threading.Tasks.Task<string[]> GeoLocationAsync(string location) {
            return base.Channel.GeoLocationAsync(location);
        }
        
        public string StaffManager(string user, string pass) {
            return base.Channel.StaffManager(user, pass);
        }
        
        public System.Threading.Tasks.Task<string> StaffManagerAsync(string user, string pass) {
            return base.Channel.StaffManagerAsync(user, pass);
        }
        
        public string GetStaff() {
            return base.Channel.GetStaff();
        }
        
        public System.Threading.Tasks.Task<string> GetStaffAsync() {
            return base.Channel.GetStaffAsync();
        }
    }
}
